/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    'third-party-access': ThirdPartyAccessAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    users: User;
    media: Media;
    'third-party-access': ThirdPartyAccess;
    blogs: Blog;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'third-party-access': ThirdPartyAccessSelect<false> | ThirdPartyAccessSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'site-settings': SiteSetting;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
  };
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (ThirdPartyAccess & {
        collection: 'third-party-access';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ThirdPartyAccessAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug: string;
  seo?: {
    title?: string | null;
    /**
     * Maximum character length is 160
     */
    description?: string | null;
    robots?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
    openGraph?: {
      images?: (string | null) | Media;
    };
  };
  layout?:
    | (
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            title: string;
            description?: string | null;
            buttons?:
              | {
                  label: string;
                  url: string;
                  style?: ('primary' | 'secondary') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'call-to-action';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            items?:
              | {
                  question: string;
                  answer: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'accordion';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            sectionTitle?: string | null;
            features?:
              | {
                  icon?: (string | null) | Media;
                  title: string;
                  description?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'feature-list';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            backgroundImage: string | Media;
            title: string;
            subtitle?: string | null;
            buttons?:
              | {
                  label: string;
                  url: string;
                  style?: ('primary' | 'secondary') | null;
                  id?: string | null;
                }[]
              | null;
            /**
             * Upload an SVG or image to use as icon
             */
            icon?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            imagePosition: 'left' | 'right';
            image: string | Media;
            title?: string | null;
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'image-text';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            title?: string | null;
            images?:
              | {
                  image: string | Media;
                  caption?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'media-gallery';
          }
        | {
            /**
             * Mark whether this block is above or below the fold
             */
            priority: 'above' | 'below';
            quote: string;
            author: string;
            role?: string | null;
            avatar?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'testimonial';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  roles?: ('admin' | 'editor' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "third-party-access".
 */
export interface ThirdPartyAccess {
  id: string;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: string;
  title: string;
  /**
   * Unique URL slug for the blog post
   */
  slug: string;
  /**
   * Author of the blog post
   */
  author: string | User;
  /**
   * Featured image for the blog post
   */
  featuredImage?: (string | null) | Media;
  /**
   * Short summary or excerpt of the blog post
   */
  excerpt?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add tags for categorization
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Date when the blog post was published
   */
  publishedDate: string;
  /**
   * Publication status
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * Select related blog posts
   */
  relatedBlogs?: (string | Blog)[] | null;
  seo?: {
    title?: string | null;
    /**
     * Maximum character length is 160
     */
    description?: string | null;
    robots?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
    openGraph?: {
      images?: (string | null) | Media;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'third-party-access';
        value: string | ThirdPartyAccess;
      } | null)
    | ({
        relationTo: 'blogs';
        value: string | Blog;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'third-party-access';
        value: string | ThirdPartyAccess;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'third-party-access';
        value: string | ThirdPartyAccess;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        robots?: T;
        keywords?: T;
        openGraph?:
          | T
          | {
              images?: T;
            };
      };
  layout?:
    | T
    | {
        'call-to-action'?:
          | T
          | {
              priority?: T;
              title?: T;
              description?: T;
              buttons?:
                | T
                | {
                    label?: T;
                    url?: T;
                    style?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        accordion?:
          | T
          | {
              priority?: T;
              items?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'feature-list'?:
          | T
          | {
              priority?: T;
              sectionTitle?: T;
              features?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        hero?:
          | T
          | {
              priority?: T;
              backgroundImage?: T;
              title?: T;
              subtitle?: T;
              buttons?:
                | T
                | {
                    label?: T;
                    url?: T;
                    style?: T;
                    id?: T;
                  };
              icon?: T;
              id?: T;
              blockName?: T;
            };
        'image-text'?:
          | T
          | {
              priority?: T;
              imagePosition?: T;
              image?: T;
              title?: T;
              content?: T;
              id?: T;
              blockName?: T;
            };
        'media-gallery'?:
          | T
          | {
              priority?: T;
              title?: T;
              images?:
                | T
                | {
                    image?: T;
                    caption?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        testimonial?:
          | T
          | {
              priority?: T;
              quote?: T;
              author?: T;
              role?: T;
              avatar?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "third-party-access_select".
 */
export interface ThirdPartyAccessSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  author?: T;
  featuredImage?: T;
  excerpt?: T;
  content?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  publishedDate?: T;
  status?: T;
  relatedBlogs?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        robots?: T;
        keywords?: T;
        openGraph?:
          | T
          | {
              images?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: string;
  siteName: string;
  navigationBar: {
    /**
     * Logo image
     */
    logo?: (string | null) | Media;
    /**
     * Navbar title
     */
    title: string;
    links?:
      | {
          label: string;
          /**
           * URL to navigate to (optional if dropdown)
           */
          url?: string | null;
          /**
           * Check if this link has nested links
           */
          isDropdown?: boolean | null;
          links?:
            | {
                label: string;
                url: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  siteName?: T;
  navigationBar?:
    | T
    | {
        logo?: T;
        title?: T;
        links?:
          | T
          | {
              label?: T;
              url?: T;
              isDropdown?: T;
              links?:
                | T
                | {
                    label?: T;
                    url?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}